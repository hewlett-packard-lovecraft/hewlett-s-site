" requires npm, vim-plug, to be installed

" General
set nu	" Show line numbers
set linebreak	" Break lines at word (requires Wrap lines)
set showbreak=++ 	" Wrap-broken line prefix
let textwidth=100	" Line wrap (number of cols)
set showmatch	" Highlight matching brace
set spell	" Enable spell-checking
setlocal spell
set spelllang=fr,en_ca

set hlsearch	" Highlight all search results
set smartcase	" Enable smart-case search
set ignorecase	" Always case-insensitive
set incsearch	" Searches for strings incrementally

set autoindent	" Auto-indent new lines
set shiftwidth=4	" Number of auto-indent spaces
set smartindent	" Enable smart-indent
set smarttab	" Enable smart-tabs
set softtabstop=4	" Number of spaces per Tab

" Advanced
set confirm	" Prompts for confirmation
set ruler	" Show row and column ruler information
set autowriteall	" Auto-write all file changes
set undolevels=1000	" Number of undo levels
set backspace=indent,eol,start	" Backspace behaviour
set clipboard=unnamed " Use system keyboard

" Split layouts
set splitbelow
set splitright

" Compatibility
set nocompatible
filetype plugin on       " may already be in your .vimrc

" split keybinds (control + vim arrow keys)
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" alternate split keys for insert m(alt + arrow keys)
nmap <silent> <A-Up> :wincmd k<CR>
nmap <silent> <A-Down> :wincmd j<CR>
nmap <silent> <A-Left> :wincmd h<CR>
nmap <silent> <A-Right> :wincmd l<CR>

" tab shortcuts (control h/L)
nnoremap <C-l> :tabnext<CR>
nnoremap <C-h> :tabprevious<CR>

" scrolling on insert
inoremap <C-E> <C-X><C-E>
inoremap <C-Y> <C-X><C-Y>

" control s to correct spelling mistakes
inoremap <C-S> <c-g>u<Esc>[s1z=`]a<c-g>u

" mouse, idk
set mouse=a

" sets leader key to space
" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = " " " Sets the leader key, make it empty for space
let g:mapleader = " "
" easier write
nmap <leader>w :w!<cr>
" easier tab creation
nmap <leader>t :tabe!<Enter>
" silence search highlighting
nnoremap <leader>sh :nohlsearch<Bar>:echo<CR>
"paste from outside buffer
nnoremap <leader>p :set paste<CR>"+p:set nopaste<CR>
vnoremap <leader>p <Esc>:set paste<CR>gv"+p:set nopaste<CR>
"copy to outside buffer
vnoremap <leader>y "+y
"paste from 0 register
"Useful because `d` overwrites the <quote> register
nnoremap <leader>P "0p
vnoremap <leader>P "0p

"Enables autocorrect on space l
nmap <leader>l <Plug>(call AutoCorrect())

" Goyo
nmap <leader>g <Plug>(Goyo)

" Terminal Function
let g:term_buf = 0
let g:term_win = 0
function! TermToggle(height)
    if win_gotoid(g:term_win)
        hide
    else
        botright new
        exec "resize " . a:height
        try
            exec "buffer " . g:term_buf
        catch
            call termopen($SHELL, {"detach": 0})
            let g:term_buf = bufnr("")
            set nonumber
            set norelativenumber
            set signcolumn=no
            set nospell
        endtry
        startinsert!
        let g:term_win = win_getid()
    endif
endfunction

" Toggle terminal on/off (neovim)
nnoremap <A-t> :call TermToggle(12)<CR>
inoremap <A-t> <Esc>:call TermToggle(12)<CR>
tnoremap <A-t> <C-\><C-n>:call TermToggle(12)<CR>

" Terminal go back to normal mode
tnoremap <Esc> <C-\><C-n>
tnoremap :q! <C-\><C-n>:q!<CR>

call plug#begin('~/.vim/plugged')
" Plug 'dense-analysis/ale'
Plug 'godlygeek/tabular'
Plug 'thaerkh/vim-workspace'

" nerdtree
Plug 'preservim/nerdtree'
Plug 'ryanoasis/vim-devicons'
Plug 'sheerun/vim-polyglot'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'scrooloose/nerdtree-project-plugin'
Plug 'PhilRunninger/nerdtree-buffer-ops'


" UtilSnips
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'
let g:UtilSnipsEditSplit = "tabdo"

Plug 'neoclide/coc.nvim', {'branch': 'release'}
let g:coc_global_extensions = ['coc-emmet', 'coc-css', 'coc-html', 'coc-json', 'coc-prettier', 'coc-tsserver', 'coc-snippets', 'coc-docker', 'coc-discord-neovim']

Plug 'sheerun/vim-polyglot'
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-commentary'
Plug 'vim-scripts/indentpython.vim'
Plug 'nvie/vim-flake8'
Plug 'tpope/vim-fugitive'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" Ricing
Plug 'flazz/vim-colorschemes'

" statusline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" HTML
Plug 'mattn/emmet-vim'
Plug 'akz92/vim-ionic2'

" Note taking
" Plug 'vimwiki/vimwiki'
Plug 'panozzaj/vim-autocorrect'
Plug 'iamcco/markdown-preview.vim'
Plug 'junegunn/goyo.vim'
Plug 'tpope/vim-surround'
Plug 'reedes/vim-pencil'
Plug 'reedes/vim-lexical'
Plug 'reedes/vim-litecorrect'
Plug 'junegunn/limelight.vim'
call plug#end()

" emmet
let g:user_emmet_leader_key=','

" Fix files with prettier, and then ESLint.
"let g:ale_fixers = {
"\   '*': ['remove_trailing_lines', 'trim_whitespace'],
"\   'javascript': ['js-beautify', 'eslint','prettier'],
"\   'css': ['eslint', 'prettier'],
"\   'html': ['html-beautify'],
"\}
" Set this variable to 1 to fix files when you save them.
"let g:ale_fix_on_save = 1

" Other options
"let g:ale_javascript_prettier_options = '--single-quote --trailing-comma all'

" NERDtree
" Opens NERDTree whenever you open a directory
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif
" Opens NERDTree on `control N`
map <C-n> :NERDTreeToggle<CR>

" Syntax checking python
let python_highlight_all=1
syntax on

" vim-lexical
let g:lexical#spell = 1         " 0=disabled, 1=enabled

" vim-pencil
let g:pencil#autoformat = 1

augroup pencil
  autocmd!
  autocmd FileType markdown,mkd call pencil#init({'wrap': 'hard', 'autoformat': 1})
  autocmd FileType text         call pencil#init({'wrap': 'hard', 'autoformat': 0})
augroup END

" limelight !!!
" shortcut that enables Limelight on ", l"
nmap <Leader>l <Plug>(Limelight)
xmap <Leader>l <Plug>(Limelight)

" Goyo integration
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

" vim-autocorrect
autocmd filetype markdown call AutoCorrect()
autocmd filetype mkd call AutoCorrect()

" fzf
nnoremap <C-p> :FZF<CR>
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit'
  \}
let $FZF_DEFAULT_COMMAND = 'ag -g ""'

" ricing
syntax enable
colorscheme solarized
" statusline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_theme='solarized'
